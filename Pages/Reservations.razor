@page "/reservations"
@using Traveless.Data
@using System.Text.Json



<div class="top">
	<div class="left">
		<h3 class="reservations">Reservations</h3>
		<div class="resList">
			@foreach(var i in displayRes)
			{
				<button id="flightDisplay" @onlclick="()=>populateFields(i.ToString())">@i.ToString()</button>
			}
			@foreach(var i in foundReservations)
			{
				<button id="flightDisplay" @onlclick="()=>populateFields(i.ToString())">@i.ToString()</button>
			}
		
			<p>@notFound</p>
		</div>
	</div>
	<div class="right">
		<h3 class="modify">Modify Reservation</h3>
		<form class="reserveForm">
			<div>
				<label for="code">Code:</label>
				<input type="text" id="code" name="code" readonly value="@myReservationInfo[0]">
			</div>
			<div>
				<label for="flight">Flight:</label>
				<input type="text" id="flight" name="flight" readonly value="@myReservationInfo[1]">
			</div>
			<div>
				<label for="airline">Airline:</label>
				<input type="text" id="airline" name="airline" readonly value="@myReservationInfo[2]">
			</div>
			<div>
				<label for="cost">Cost:</label>
				<input type="text" id="cost" name="cost" readonly value="@myReservationInfo[3]">
			</div>
			<div>
				<label for="name">Name:</label>
				<input type="text" id="name" name="name" value="@myReservationInfo[4]">
			</div>
			<div>
				<label for="citizenship">Citizenship:</label>
				<input type="text" id="citizenship" name="citizenship" value="@myReservationInfo[5]">
			</div>
			<div>
				<label for="status">Status:</label>
				<select name="status" id="status">
					<option value="active">Active</option>
					<option value="inactive">inactive</option>
				</select>
			</div>
			<div>
				<button class="modifyButton" type="submit" @onsubmit="modifyReservation">Modify</button>
			</div>
		</form>
	</div>
</div>

<div class="bottom">
	<h3 class="resFinder">Search</h3>
	<form class="resForm" @onsubmit="findReservations">
		<div class="finder">
			<label for="code">Code:</label>
			<input type="text" id="code" name="code" @bind="rcode"><br>
		</div>
		<div class="finder">
			<label for="airline">Airline (2 letters):</label>
			<input type="text" id="airline" name="airline" @bind="rairl"><br>
		</div>
		<div class="finder">
			<label for="name">Name:</label>
			<input type="text" id="name" name="name" @bind="rname"><br>
		</div>
		<div>
			<button class="searchButton" type="submit">Find reservation</button>
		</div>
	</form>
</div>


@code {

	// loading reservations from JSON file
	public List<ReservationObj> reservList = new();
	protected override void OnInitialized()
	{
		var path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "reservations.json");
		if (!File.Exists(path))
			return;
		var contents = File.ReadAllText(path);
		var savedItems = JsonSerializer.Deserialize<List<ReservationObj>>(contents);

		reservList.AddRange(savedItems);

		base.OnInitialized();

	}

	protected override async Task OnInitializedAsync()
	{
		await DisplayRes();
	}

	public async Task DisplayRes()
	{
		if (reservList!= null)
		{
			foreach (var i in reservList)
			{
				displayRes.Add(i);
			}
		}
	}

	// Searching reservations based on reservation codde, airline, and/or name
	string rcode;
	string rairl;
	string rname;
	string notFound;
	List<ReservationObj> foundReservations = new();
	List<ReservationObj> displayRes = new();
	public void findReservations()
	{
		displayRes.Clear();
		foundReservations.Clear();
		notFound = string.Empty;
		if (!foundReservations.Any())
		{
			notFound = "No reservations found!";
		}
		else{
			foreach (var i in reservList)
			{
				bool match = true;
				if (!string.IsNullOrEmpty(rcode) && i.ReservCode != rcode)
				{
					match = false;
				}
				if (!string.IsNullOrEmpty(rairl) && i.Flight.FlightCode.Substring(0, 2) != rairl)
				{
					match = false;
				}
				if (!string.IsNullOrEmpty(rname) && i.Name != rname)
				{
					match = false;
				}
				if (match)
				{
					foundReservations.Add(i);
				}
			}
		}

	}

	// Populating fields for Modifying Reservation session session
	String myReservation;
	List<String> myReservationInfo = new List<String> { "", "", "", "", "", "", "" };
	public void populateFields()
	{
		myReservationInfo = myReservation.Split(',').ToList();
	}

	// Modifying Reservation
	//string modifiedName;
	//modifiedName = myReservationInfo[4];
	//string modifiedCitizenship;
	//string modifiedStatus;
	//public void modifiedReservation()
	//{

	//}

	//modify reservation

	public async Task modifyReservation()
	{
		try
		{
			// Get the values from the form
			string code = myReservationInfo[0];
			string flight = myReservationInfo[1];
			string airline = myReservationInfo[2];
			string cost = myReservationInfo[3];
			string name = myReservationInfo[4];
			string citizenship = myReservationInfo[5];


			var reservation = reservList.Find(r => r.ReservCode == myReservationInfo[0]);
			if (reservation != null)
			{
				reservation.Name = name;
				reservation.Nationality = citizenship;
				reservation.Status = "active";
			}
			else
			{
				throw new Exception("Reservation not found.");
			}
		}
		catch (Exception)
		{
			// Display error message
			await App.Current.MainPage.DisplayAlert("Reservation Not Found", "Did you make a typo? Please try again.", "Reservation cannot be updated");
		}
	}

}
